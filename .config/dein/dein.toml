# [[plugins]]
# repo = 'tomasr/molokai'
# hook_add = '''
#     let g:molokai_original = 1
#     let g:rehash256 = 1
#     set background=dark
#     colorscheme molokai
# '''

# [[plugins]]
# repo = 'altercation/vim-colors-solarized'
# hook_add = '''
#     set t_Co=256
#     syntax enable
#     let g:solarized_termtrans = 1
#     let g:solarized_termcolors=256
#     set background=dark
#     colorscheme solarized
# '''

[[plugins]]
repo = 'wong/vim-hybrid'
hook_add = '''
    let g:hybrid_use_iTerm_colors = 1
    colorscheme hybrid
    syntax on
'''

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertCharPre'
hook_add = '''
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#auto_complete_delay = 0
  let g:deoplete#auto_complete_start_length = 1
  let g:deoplete#enable_camel_case = 0
  let g:deoplete#enable_ignore_case = 0
  let g:deoplete#enable_refresh_always = 0
  let g:deoplete#enable_smart_case = 1
  let g:deoplete#file#enable_buffer_path = 1
  let g:deoplete#max_list = 10000
  inoremap <expr><tab> pumvisible() ? "\<C-n>" :
    \ neosnippet#expandable_or_jumpable() ?
    \    "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    nnoremap <silent><C-e> :NERDTreeToggle<CR>
    autocmd vimenter * if !argc() | NERDTree | endif
    nmap <Leader><Tab> <C-w>w
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
jhook_add = '''
    nmap [denite] <Nop>
    map <C-j> [denite]
'''

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
    let g:airline_powerline_fonts = 1
    let g:airline#extensions#tabline#enabled = 1
    let g:airline_section_z = airline#section#create(['windowswap', '%3p%% ', 'linenr', ':%3v'])
    let g:airline#extensions#virtualenv#enabled = 1
    let g:airline#extensions#hunks#enabled = 0
    let g:airline#extensions#ale#enabled = 1
    let g:airline#extensions#ale#error_symbol = 'E:'
    let g:airline#extensions#ale#warning_symbol = 'W:'
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
hook_add = '''
    let g:airline_theme='luna'
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
    let g:indent_guides_enable_on_vim_startup = 1
    let g:indent_guides_start_level = 2
    let g:indent_guides_guide_size = 1
    let g:indent_guides_exclude_filetypes = ['help', 'nerdtree', 'tagbar', 'unite']
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
    " vimprocで非同期実行
    " 成功時にバッファ、失敗時にQuickFixで表示
    " 結果表示のサイズ調整など
    let g:quickrun_config = {
        \ '_' : {
             \ 'runner' : 'vimproc',
            \ 'runner/vimproc/updatetime' : 40,
            \ 'outputter' : 'error',
            \ 'outputter/error/success' : 'buffer',
            \ 'outputter/error/error'   : 'quickfix',
            \ 'outputter/buffer/split' : ':botright 8sp',
        \ }
    \}

    " 実行時に前回の表示内容をクローズ&保存してから実行
    let g:quickrun_no_default_key_mappings = 1
    nmap <Leader>r :cclose<CR>:write<CR>:QuickRun -mode n<CR>
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_source = '''
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''
on_i  = 1
on_ft = ['snippet']
depends = ['neosnippet-snippets']

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
    nnoremap <silent><C-l> :TagbarToggle<CR>
    let g:tagbar_width = 30
    let g:tagbar_autoshowtag = 1
'''

